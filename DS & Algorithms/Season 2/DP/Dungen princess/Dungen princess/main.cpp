//
//  main.cpp
//  Dungen princess
//
//  Created by Giriraj Saigal on 15/07/21.
//

#include <iostream>
#include <cmath>
#include <vector>
#include <map>
#include <unordered_map>
#include <stack>
#include <queue>
#include <set>
using namespace std;

vector<vector<long long>> dp;
long long solve(int i, int j, vector<vector<int> > &A) {
    
    if(dp[i][j] != INT_MIN)
        return dp[i][j];
        
    long long x = A[i][j];
    
    if(i == A.size()-1 && j == A[0].size()-1){
        if(x >= 0)
            return dp[i][j] = 0;
        else
            return dp[i][j] = x;
    }
        
    if(i+1 < A.size() && j+1 < A[0].size()) {
        long long p = solve(i+1,j,A);
        long long q = solve(i,j+1,A);
        long long r = max(p,q);
        long long ans = x + r;
        if(ans > 0)
            return dp[i][j] = 0;
        else
            return dp[i][j] = ans;
    }else if(i+1 < A.size()){
        long long v = solve(i+1,j,A);
        long long ans = v+x;
        if(ans > 0)
            return dp[i][j] = 0;
        else
            return dp[i][j] = ans;
    }else{
        long long v = solve(i,j+1,A);
        long long ans = v+x;
        if(ans > 0)
            return dp[i][j] = 0;
        else
            return dp[i][j] = ans;
    }
}
 int calculateMinimumHP(vector<vector<int> > A) {
    if(A.size() == 0)
        return 1;
    
    if(A[0].size() == 0)
        return 1;
    
    dp = vector<vector<long long>>(A.size()+1, vector<long long>(A[0].size()+1, INT_MIN));
    long long ans = solve(0,0,A);
    return -1*ans + 1;
}

int main(int argc, const char * argv[]) {
    cout<<calculateMinimumHP({
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
        {-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100},
       })<<endl;
    return 0;
}
