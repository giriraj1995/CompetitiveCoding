//
//  main.cpp
//  928. Minimize Malware Spread II
//
//  Created by Giriraj Saigal on 28/10/21.
//

#include <iostream>
#include <cmath>
#include <vector>
#include <map>
#include <unordered_map>
#include <stack>
#include <queue>
#include <set>
using namespace std;

unordered_map<int,set<int>> mp;
    set<int> ans;
    
void DFS(int u, vector<int> &parent, vector<int> &low, vector<int> &disc) {
        static int time = 0;
        low[u] = disc[u] = time;
        time += 1;
        int c = 0;
        
        for(int v : mp[u]) {
            if(disc[v] == -1) {
                c++;
                parent[v] = u;
                DFS(v, parent, low, disc);
                low[u] = min(low[u], low[v]);
                
                if(parent[u] == -1 && c > 1) {
                    ans.insert(u);
                }else if(parent[u] != v && low[v] >= disc[u]){
                    ans.insert(u);
                }
            }else{
                if(parent[u] != v) {
                    low[u] = min(low[u], disc[v]);
                }
            }
        }
        
    }

int minMalwareSpread(vector<vector<int>> graph, vector<int> initial) {
        mp.clear();
        int n = graph.size();
        
        for(int i = 0 ; i < graph.size(); i++) {
            for(int j = 0; j < n; j++) {
                if(i == j)
                    continue;
                
                if(graph[i][j]) {
                    mp[i].insert(j);
                }
            }
        }
        
        for(int i = 0; i < initial.size(); i++) {
            vector<int> parent(n, -1);
            vector<int> low(n, -1);
            vector<int> disc(n, -1);
            DFS(initial[i], parent, low, disc);
        }
        
        return *(ans.begin());
    }

int main(int argc, const char * argv[]) {
    minMalwareSpread({{1,1,0},{1,1,1},{0,1,1}},
                     {0,1});
    return 0;
}
