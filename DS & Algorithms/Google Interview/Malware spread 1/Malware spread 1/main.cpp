//
//  main.cpp
//  Malware spread 1
//
//  Created by Giriraj Saigal on 28/10/21.
//

#include <iostream>
#include <cmath>
#include <vector>
#include <map>
#include <unordered_map>
#include <stack>
#include <queue>
#include <set>
using namespace std;

unordered_map<int, vector<int>> mp;

void DFS2(int u, set<int> &now) {
        now.insert(u);
        for(int v : mp[u]) {
            if(now.count(v) == 0)
                DFS2(v, now);
        }
    }


int minMalwareSpread(vector<vector<int>> graph, vector<int> initial) {
        vector<set<int>> cc;
        int n = (int)graph.size();
        mp.clear();
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(graph[i][j] && i != j) mp[i].push_back(j);
            }
        }
    
        set<int> total;
        
        for(int i = 0; i < n; i++) {
            if(total.count(i) == 0) {
                set<int> now;
                DFS2(i, now);
                cc.push_back(now);
                int m = i+1;
                for(int f : now) {
                    total.insert(f);
                }
            }
        }
        sort(initial.begin(), initial.end());
        //found cc
        // now find all cc with one initial malware comp
        
        int ind = -1;
        int maxCount = 0;
        int totalNode = n;
    
        for(auto g : cc) {
            int count = 0;
            bool ok = true;
            int found = -1;
            
            for(int f : initial) {
                if(g.count(f)) {
                    count++;
                    found = f;
                    if(count > 1){
                        ok = false;
                        break;
                    }
                }
            }
            
            if(!ok)
                continue;
            
            if(found == -1)
                continue;
            
            if(g.size() > maxCount) {
                maxCount = (int)g.size();
                ind = found;
            }
        }
        
        if(ind == -1)
            return initial[0];
        
        return ind;
    }

int main(int argc, const char * argv[]) {
    cout << minMalwareSpread({
        {1,0,1,0},
        {0,1,0,1},
        {1,0,1,0},
        {0,1,0,1}}
                             ,{2,1});
    return 0;
}
